/*
 * This file is generated by jOOQ.
*/
package org.imperial.mrc.hint.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.imperial.mrc.hint.db.Indexes;
import org.imperial.mrc.hint.db.Keys;
import org.imperial.mrc.hint.db.Public;
import org.imperial.mrc.hint.db.tables.records.VersionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Version extends TableImpl<VersionRecord> {

    private static final long serialVersionUID = 1480437734;

    /**
     * The reference instance of <code>public.version</code>
     */
    public static final Version VERSION = new Version();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VersionRecord> getRecordType() {
        return VersionRecord.class;
    }

    /**
     * The column <code>public.version.id</code>.
     */
    public final TableField<VersionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('version_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.version.user_id</code>.
     */
    public final TableField<VersionRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.version.name</code>.
     */
    public final TableField<VersionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.version.note</code>.
     */
    public final TableField<VersionRecord, String> NOTE = createField("note", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.version</code> table reference
     */
    public Version() {
        this(DSL.name("version"), null);
    }

    /**
     * Create an aliased <code>public.version</code> table reference
     */
    public Version(String alias) {
        this(DSL.name(alias), VERSION);
    }

    /**
     * Create an aliased <code>public.version</code> table reference
     */
    public Version(Name alias) {
        this(alias, VERSION);
    }

    private Version(Name alias, Table<VersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Version(Name alias, Table<VersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VERSION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VersionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VersionRecord> getPrimaryKey() {
        return Keys.VERSION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VersionRecord>> getKeys() {
        return Arrays.<UniqueKey<VersionRecord>>asList(Keys.VERSION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<VersionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VersionRecord, ?>>asList(Keys.VERSION__VERSION_USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Version as(String alias) {
        return new Version(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Version as(Name alias) {
        return new Version(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Version rename(String name) {
        return new Version(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Version rename(Name name) {
        return new Version(name, null);
    }
}
