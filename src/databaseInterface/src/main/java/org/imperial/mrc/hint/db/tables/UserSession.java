/*
 * This file is generated by jOOQ.
 */
package org.imperial.mrc.hint.db.tables;


import java.util.Arrays;
import java.util.List;

import org.imperial.mrc.hint.db.Keys;
import org.imperial.mrc.hint.db.Public;
import org.imperial.mrc.hint.db.tables.records.UserSessionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSession extends TableImpl<UserSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_session</code>
     */
    public static final UserSession USER_SESSION = new UserSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSessionRecord> getRecordType() {
        return UserSessionRecord.class;
    }

    /**
     * The column <code>public.user_session.session</code>.
     */
    public final TableField<UserSessionRecord, String> SESSION = createField(DSL.name("session"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_session.user_id</code>.
     */
    public final TableField<UserSessionRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.CLOB, this, "");

    private UserSession(Name alias, Table<UserSessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserSession(Name alias, Table<UserSessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_session</code> table reference
     */
    public UserSession(String alias) {
        this(DSL.name(alias), USER_SESSION);
    }

    /**
     * Create an aliased <code>public.user_session</code> table reference
     */
    public UserSession(Name alias) {
        this(alias, USER_SESSION);
    }

    /**
     * Create a <code>public.user_session</code> table reference
     */
    public UserSession() {
        this(DSL.name("user_session"), null);
    }

    public <O extends Record> UserSession(Table<O> child, ForeignKey<O, UserSessionRecord> key) {
        super(child, key, USER_SESSION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserSessionRecord> getPrimaryKey() {
        return Keys.USER_SESSION_PKEY;
    }

    @Override
    public List<UniqueKey<UserSessionRecord>> getKeys() {
        return Arrays.<UniqueKey<UserSessionRecord>>asList(Keys.USER_SESSION_PKEY);
    }

    @Override
    public List<ForeignKey<UserSessionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserSessionRecord, ?>>asList(Keys.USER_SESSION__USER_SESSION_USER_ID_FKEY);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USER_SESSION__USER_SESSION_USER_ID_FKEY);

        return _users;
    }

    @Override
    public UserSession as(String alias) {
        return new UserSession(DSL.name(alias), this);
    }

    @Override
    public UserSession as(Name alias) {
        return new UserSession(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSession rename(String name) {
        return new UserSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSession rename(Name name) {
        return new UserSession(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
