/*
 * This file is generated by jOOQ.
*/
package org.imperial.mrc.hint.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.imperial.mrc.hint.db.Indexes;
import org.imperial.mrc.hint.db.Keys;
import org.imperial.mrc.hint.db.Public;
import org.imperial.mrc.hint.db.tables.records.AdrKeyRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdrKey extends TableImpl<AdrKeyRecord> {

    private static final long serialVersionUID = -497829520;

    /**
     * The reference instance of <code>public.adr_key</code>
     */
    public static final AdrKey ADR_KEY = new AdrKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdrKeyRecord> getRecordType() {
        return AdrKeyRecord.class;
    }

    /**
     * The column <code>public.adr_key.api_key</code>.
     */
    public final TableField<AdrKeyRecord, String> API_KEY = createField("api_key", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.adr_key.user_id</code>.
     */
    public final TableField<AdrKeyRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.adr_key</code> table reference
     */
    public AdrKey() {
        this(DSL.name("adr_key"), null);
    }

    /**
     * Create an aliased <code>public.adr_key</code> table reference
     */
    public AdrKey(String alias) {
        this(DSL.name(alias), ADR_KEY);
    }

    /**
     * Create an aliased <code>public.adr_key</code> table reference
     */
    public AdrKey(Name alias) {
        this(alias, ADR_KEY);
    }

    private AdrKey(Name alias, Table<AdrKeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdrKey(Name alias, Table<AdrKeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADR_KEY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdrKeyRecord> getPrimaryKey() {
        return Keys.ADR_KEY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdrKeyRecord>> getKeys() {
        return Arrays.<UniqueKey<AdrKeyRecord>>asList(Keys.ADR_KEY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AdrKeyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AdrKeyRecord, ?>>asList(Keys.ADR_KEY__ADR_KEY_USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdrKey as(String alias) {
        return new AdrKey(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdrKey as(Name alias) {
        return new AdrKey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdrKey rename(String name) {
        return new AdrKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdrKey rename(Name name) {
        return new AdrKey(name, null);
    }
}
