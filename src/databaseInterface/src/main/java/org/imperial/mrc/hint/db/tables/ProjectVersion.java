/*
 * This file is generated by jOOQ.
*/
package org.imperial.mrc.hint.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.imperial.mrc.hint.db.Indexes;
import org.imperial.mrc.hint.db.Keys;
import org.imperial.mrc.hint.db.Public;
import org.imperial.mrc.hint.db.tables.records.ProjectVersionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectVersion extends TableImpl<ProjectVersionRecord> {

    private static final long serialVersionUID = 343706417;

    /**
     * The reference instance of <code>public.project_version</code>
     */
    public static final ProjectVersion PROJECT_VERSION = new ProjectVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectVersionRecord> getRecordType() {
        return ProjectVersionRecord.class;
    }

    /**
     * The column <code>public.project_version.id</code>.
     */
    public final TableField<ProjectVersionRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.project_version.project_id</code>.
     */
    public final TableField<ProjectVersionRecord, Integer> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.project_version.state</code>.
     */
    public final TableField<ProjectVersionRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.project_version.note</code>.
     */
    public final TableField<ProjectVersionRecord, String> NOTE = createField("note", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.project_version.created</code>.
     */
    public final TableField<ProjectVersionRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("timezone('utc'::text, now())", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.project_version.updated</code>.
     */
    public final TableField<ProjectVersionRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("timezone('utc'::text, now())", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.project_version.deleted</code>.
     */
    public final TableField<ProjectVersionRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.project_version.version_number</code>.
     */
    public final TableField<ProjectVersionRecord, Integer> VERSION_NUMBER = createField("version_number", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.project_version</code> table reference
     */
    public ProjectVersion() {
        this(DSL.name("project_version"), null);
    }

    /**
     * Create an aliased <code>public.project_version</code> table reference
     */
    public ProjectVersion(String alias) {
        this(DSL.name(alias), PROJECT_VERSION);
    }

    /**
     * Create an aliased <code>public.project_version</code> table reference
     */
    public ProjectVersion(Name alias) {
        this(alias, PROJECT_VERSION);
    }

    private ProjectVersion(Name alias, Table<ProjectVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectVersion(Name alias, Table<ProjectVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROJECT_VERSION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectVersionRecord> getPrimaryKey() {
        return Keys.PROJECT_VERSION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectVersionRecord>>asList(Keys.PROJECT_VERSION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjectVersionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectVersionRecord, ?>>asList(Keys.PROJECT_VERSION__PROJECT_VERSION_PROJECT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectVersion as(String alias) {
        return new ProjectVersion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectVersion as(Name alias) {
        return new ProjectVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectVersion rename(String name) {
        return new ProjectVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectVersion rename(Name name) {
        return new ProjectVersion(name, null);
    }
}
