/*
 * This file is generated by jOOQ.
 */
package org.imperial.mrc.hint.db.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.imperial.mrc.hint.db.Keys;
import org.imperial.mrc.hint.db.Public;
import org.imperial.mrc.hint.db.tables.records.ProjectVersionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectVersion extends TableImpl<ProjectVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.project_version</code>
     */
    public static final ProjectVersion PROJECT_VERSION = new ProjectVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectVersionRecord> getRecordType() {
        return ProjectVersionRecord.class;
    }

    /**
     * The column <code>public.project_version.id</code>.
     */
    public final TableField<ProjectVersionRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.project_version.project_id</code>.
     */
    public final TableField<ProjectVersionRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.project_version.state</code>.
     */
    public final TableField<ProjectVersionRecord, String> STATE = createField(DSL.name("state"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.project_version.note</code>.
     */
    public final TableField<ProjectVersionRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.project_version.created</code>.
     */
    public final TableField<ProjectVersionRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("timezone('utc'::text, now())", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.project_version.updated</code>.
     */
    public final TableField<ProjectVersionRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("timezone('utc'::text, now())", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.project_version.deleted</code>.
     */
    public final TableField<ProjectVersionRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.project_version.version_number</code>.
     */
    public final TableField<ProjectVersionRecord, Integer> VERSION_NUMBER = createField(DSL.name("version_number"), SQLDataType.INTEGER, this, "");

    private ProjectVersion(Name alias, Table<ProjectVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectVersion(Name alias, Table<ProjectVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.project_version</code> table reference
     */
    public ProjectVersion(String alias) {
        this(DSL.name(alias), PROJECT_VERSION);
    }

    /**
     * Create an aliased <code>public.project_version</code> table reference
     */
    public ProjectVersion(Name alias) {
        this(alias, PROJECT_VERSION);
    }

    /**
     * Create a <code>public.project_version</code> table reference
     */
    public ProjectVersion() {
        this(DSL.name("project_version"), null);
    }

    public <O extends Record> ProjectVersion(Table<O> child, ForeignKey<O, ProjectVersionRecord> key) {
        super(child, key, PROJECT_VERSION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProjectVersionRecord> getPrimaryKey() {
        return Keys.PROJECT_VERSION_PKEY;
    }

    @Override
    public List<UniqueKey<ProjectVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectVersionRecord>>asList(Keys.PROJECT_VERSION_PKEY);
    }

    @Override
    public List<ForeignKey<ProjectVersionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectVersionRecord, ?>>asList(Keys.PROJECT_VERSION__PROJECT_VERSION_PROJECT_ID_FKEY);
    }

    private transient Project _project;

    public Project project() {
        if (_project == null)
            _project = new Project(this, Keys.PROJECT_VERSION__PROJECT_VERSION_PROJECT_ID_FKEY);

        return _project;
    }

    @Override
    public ProjectVersion as(String alias) {
        return new ProjectVersion(DSL.name(alias), this);
    }

    @Override
    public ProjectVersion as(Name alias) {
        return new ProjectVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectVersion rename(String name) {
        return new ProjectVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectVersion rename(Name name) {
        return new ProjectVersion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, Integer, String, String, LocalDateTime, LocalDateTime, Boolean, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
