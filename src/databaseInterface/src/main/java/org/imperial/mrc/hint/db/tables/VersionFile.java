/*
 * This file is generated by jOOQ.
 */
package org.imperial.mrc.hint.db.tables;


import java.util.Arrays;
import java.util.List;

import org.imperial.mrc.hint.db.Keys;
import org.imperial.mrc.hint.db.Public;
import org.imperial.mrc.hint.db.tables.records.VersionFileRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VersionFile extends TableImpl<VersionFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.version_file</code>
     */
    public static final VersionFile VERSION_FILE = new VersionFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VersionFileRecord> getRecordType() {
        return VersionFileRecord.class;
    }

    /**
     * The column <code>public.version_file.version</code>.
     */
    public final TableField<VersionFileRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.version_file.hash</code>.
     */
    public final TableField<VersionFileRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.version_file.type</code>.
     */
    public final TableField<VersionFileRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.version_file.filename</code>.
     */
    public final TableField<VersionFileRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.version_file.from_adr</code>.
     */
    public final TableField<VersionFileRecord, Boolean> FROM_ADR = createField(DSL.name("from_adr"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.version_file.resource_url</code>.
     */
    public final TableField<VersionFileRecord, String> RESOURCE_URL = createField(DSL.name("resource_url"), SQLDataType.CLOB, this, "");

    private VersionFile(Name alias, Table<VersionFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private VersionFile(Name alias, Table<VersionFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.version_file</code> table reference
     */
    public VersionFile(String alias) {
        this(DSL.name(alias), VERSION_FILE);
    }

    /**
     * Create an aliased <code>public.version_file</code> table reference
     */
    public VersionFile(Name alias) {
        this(alias, VERSION_FILE);
    }

    /**
     * Create a <code>public.version_file</code> table reference
     */
    public VersionFile() {
        this(DSL.name("version_file"), null);
    }

    public <O extends Record> VersionFile(Table<O> child, ForeignKey<O, VersionFileRecord> key) {
        super(child, key, VERSION_FILE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<VersionFileRecord> getPrimaryKey() {
        return Keys.VERSION_FILE_PKEY;
    }

    @Override
    public List<UniqueKey<VersionFileRecord>> getKeys() {
        return Arrays.<UniqueKey<VersionFileRecord>>asList(Keys.VERSION_FILE_PKEY);
    }

    @Override
    public List<ForeignKey<VersionFileRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VersionFileRecord, ?>>asList(Keys.VERSION_FILE__VERSION_FILE_VERSION_FKEY, Keys.VERSION_FILE__VERSION_FILE_HASH_FKEY);
    }

    private transient ProjectVersion _projectVersion;
    private transient File _file;

    public ProjectVersion projectVersion() {
        if (_projectVersion == null)
            _projectVersion = new ProjectVersion(this, Keys.VERSION_FILE__VERSION_FILE_VERSION_FKEY);

        return _projectVersion;
    }

    public File file() {
        if (_file == null)
            _file = new File(this, Keys.VERSION_FILE__VERSION_FILE_HASH_FKEY);

        return _file;
    }

    @Override
    public VersionFile as(String alias) {
        return new VersionFile(DSL.name(alias), this);
    }

    @Override
    public VersionFile as(Name alias) {
        return new VersionFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VersionFile rename(String name) {
        return new VersionFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VersionFile rename(Name name) {
        return new VersionFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, Boolean, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
