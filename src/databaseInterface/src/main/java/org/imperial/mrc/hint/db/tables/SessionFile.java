/*
 * This file is generated by jOOQ.
 */
package org.imperial.mrc.hint.db.tables;


import java.util.Arrays;
import java.util.List;

import org.imperial.mrc.hint.db.Keys;
import org.imperial.mrc.hint.db.Public;
import org.imperial.mrc.hint.db.tables.records.SessionFileRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionFile extends TableImpl<SessionFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.session_file</code>
     */
    public static final SessionFile SESSION_FILE = new SessionFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionFileRecord> getRecordType() {
        return SessionFileRecord.class;
    }

    /**
     * The column <code>public.session_file.session</code>.
     */
    public final TableField<SessionFileRecord, String> SESSION = createField(DSL.name("session"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.session_file.hash</code>.
     */
    public final TableField<SessionFileRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.session_file.type</code>.
     */
    public final TableField<SessionFileRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.session_file.filename</code>.
     */
    public final TableField<SessionFileRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.CLOB, this, "");

    private SessionFile(Name alias, Table<SessionFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private SessionFile(Name alias, Table<SessionFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.session_file</code> table reference
     */
    public SessionFile(String alias) {
        this(DSL.name(alias), SESSION_FILE);
    }

    /**
     * Create an aliased <code>public.session_file</code> table reference
     */
    public SessionFile(Name alias) {
        this(alias, SESSION_FILE);
    }

    /**
     * Create a <code>public.session_file</code> table reference
     */
    public SessionFile() {
        this(DSL.name("session_file"), null);
    }

    public <O extends Record> SessionFile(Table<O> child, ForeignKey<O, SessionFileRecord> key) {
        super(child, key, SESSION_FILE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<SessionFileRecord> getPrimaryKey() {
        return Keys.SESSION_FILE_PKEY;
    }

    @Override
    public List<UniqueKey<SessionFileRecord>> getKeys() {
        return Arrays.<UniqueKey<SessionFileRecord>>asList(Keys.SESSION_FILE_PKEY);
    }

    @Override
    public List<ForeignKey<SessionFileRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SessionFileRecord, ?>>asList(Keys.SESSION_FILE__SESSION_FILE_SESSION_FKEY, Keys.SESSION_FILE__SESSION_FILE_HASH_FKEY);
    }

    private transient UserSession _userSession;
    private transient File _file;

    public UserSession userSession() {
        if (_userSession == null)
            _userSession = new UserSession(this, Keys.SESSION_FILE__SESSION_FILE_SESSION_FKEY);

        return _userSession;
    }

    public File file() {
        if (_file == null)
            _file = new File(this, Keys.SESSION_FILE__SESSION_FILE_HASH_FKEY);

        return _file;
    }

    @Override
    public SessionFile as(String alias) {
        return new SessionFile(DSL.name(alias), this);
    }

    @Override
    public SessionFile as(Name alias) {
        return new SessionFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionFile rename(String name) {
        return new SessionFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionFile rename(Name name) {
        return new SessionFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
