(
$dataByArea := data {`area_id`: $};
$areaIds := $keys($dataByArea);

$lineColor := "rgb(51, 51, 51)";
$highlightColor := "rgb(255, 51, 51)";
$subplotHeight := 1/subplots.rows * 0.6;
$timePeriods := $sort(data.time_period);
$firstXAxisVal := $timePeriods[0];
$lastXAxisVal := $timePeriods[$count(timePeriods) - 1];

{
    "data":
        $map($areaIds, function($v, $i) {(
            $areaData := $lookup($dataByArea, $v);
            $values := $areaData.value;

            /* Check if each successive line should be highlighted - if the difference between a value and its preceding
               value exceeds the threshold, and return this as array of boolean */
            $highlightedLineIndexes := $map([1..$count($values)-1], function($thv) {(
                 $thisVal := $values[$thv];
                 $prevVal := $values[$thv-1];

                 $thisVal != null and $prevVal != null and $thisVal > 0
                 and
                 ($thisVal > (1.25 * $prevVal) or $thisVal < (0.75 * $prevVal))
            )});

            $noHighlightsRequired := $count($filter($highlightedLineIndexes, function($v, $i) {$v}) ) = 0;
            $highlightXAndY := $noHighlightsRequired ? [[],[]] : (
                /* Check if there are any single-value gaps between highlighted indexes - if so, we need to interpolate
                nulls into the data to force a line break so the line between is not highlighted*/
                $interpolateIndexes := $map([0..$count($highlightedLineIndexes)-2], function($v){
                    $v > 0 and
                    $highlightedLineIndexes[$v-1] and $not($highlightedLineIndexes[$v]) and $highlightedLineIndexes[$v+1]
                });
                $interpolationRequired := $count($filter($interpolateIndexes, function($v, $i) {$v}) ) > 0;

                $highlightY := $map([0..$count($values)-1], function($v){(
                   /* Calculate if this marker should be highlighted, if so add value to highlighted y markers, if not add null*/
                   $markerVal := ($v = 0 and $highlightedLineIndexes[0])
                         or
                        ($v = $count($highlightedLineIndexes) and $highlightedLineIndexes[$v-1])
                        or
                        ($v > 0 and $v < $count($highlightedLineIndexes) and ($highlightedLineIndexes[$v-1] or $highlightedLineIndexes[$v]))
                        ? $values[$v] : null;

                    $interpolateIndexes[$v] ? [$markerVal, null] : [$markerVal]

                )}).*;

                $timePeriods := $areaData.time_period;
                $highlightX := $not($interpolationRequired) ? $timePeriods : $map([0..$count($values)-1], function($v){(
                    $interpolateIndexes[$v] ? [$timePeriods[$v], null] : [$timePeriods[$v]];
                )}).*;

                [[$highlightX], [$highlightY]]
             );

            $areaHierarchy := ($lookup($dataByArea, $v).area_hierarchy)[0];
            $areaHierarchyTooltip := $areaHierarchy ? "<br>" & $areaHierarchy : "";
            $hoverTemplate := "%{x}, %{y}" & $areaHierarchyTooltip & "<extra></extra>";

            [
               {
                    "name": ($lookup($dataByArea, $v).area_name)[0],
                    "showlegend": false,
                    "x": [$areaData.time_period],
                    "y": [$areaData.value],
                    "xaxis": 'x' & ($i+1),
                    "yaxis": 'y' & ($i+1),
                    "type": "scatter",
                    "line": {
                        "color": $lineColor
                    },
                    "hovertemplate": $hoverTemplate
                },
                {
                    "name": ($lookup($dataByArea, $v).area_name)[0],
                    "showlegend": false,
                    "x": $highlightXAndY[0],
                    "y": $highlightXAndY[1],
                    "xaxis": 'x' & ($i+1),
                    "yaxis": 'y' & ($i+1),
                    "type": "scatter",
                    "line": {
                        "color": $highlightColor
                    },
                    "hovertemplate": $hoverTemplate
                }
            ]
        )}
    )[].*,
    "config": {
        "responsive": false,
        "scrollZoom": false,
        "modeBarButtonsToRemove": ['zoom2d', 'pan2d', 'select2d', 'lasso2d', 'autoScale2d', 'resetScale2d', 'zoomIn2d', 'zoomOut2d']
        },
    "layout": $merge([
        {
            "margin": {"t": 32},
            "dragmode": false,
            "grid": {"columns": subplots.columns, "rows": subplots.rows, "pattern": 'independent'},
            "annotations": $map($areaIds, function($v, $i) {
                {
                    "text": ($lookup($dataByArea, $v).area_name)[0] & " (" & $v & ")",
                    "textfont": {},
                    "showarrow": false,
                    "x": 0.5,
                    "xanchor": "middle",
                    "xref": "x" & ($i+1) & " domain",
                    "y": 1.1,
                    "yanchor": "middle",
                    "yref": "y" & ($i+1) & " domain"
                }
            })[]
        },
        [1..$count($areaIds)].(
           $row := $floor(($-1)/$$.subplots.columns);
           {
               "yaxis"&$: {
                   "rangemode": "tozero",
                   "zeroline": false,
                   "tickformat": $$.yAxisFormat,
                   "tickfont": {
                       "color": "grey"
                   },
                   "domain": [
                       1 - ($row/$$.subplots.rows),
                       1 - (($row/$$.subplots.rows) + $subplotHeight)
                   ]
               },
               "xaxis"&$: {
                   "zeroline": false,
                   "tickvals": [$firstXAxisVal, $lastXAxisVal],
                    "tickfont": {
                        "color": "grey"
                    }
               }
           }
        )
    ])
})
